chartmuseum:

  #
  # The ip address to which the docker container should bind.
  #
  bind_ip: 192.168.51.6

  #
  # The host port to which the docker container's Chartmuseum service should
  # be exposed
  #
  # bind_port: 80

  #
  # The path in the docker host to which to mount the Chartmuseum's data
  #
  # data_dir: /datavols/helm/chart-repo

  #
  # Configurations for an optional data volume to persist the Chartmuseum 
  # data beyond the target minion, including:
  # 
  # * a mounted share (such as an AWS EBS volume); or
  # * an existing Docker volume
  #
  # data_volume:
      #
      # Optional name of the docker volume to which the Chartmuseum data should 
      # be persisted. 
      #
      # name: chartmuseum-data
      
      #
      # Optional device name to specify. If specified, will ensure the data 
      # volume with the specified device name is formatted and mounted on the 
      # target minion in conjunction with the chartmuseum:data_volume:fstype
      # parameter
      #
      # device:
       
      #
      # The file system type of the data volume to mount. Will be ignored 
      # unless the chartmuseum:data_volume:device pillar value is specified.
      #
      # fstype: 

  #
  # The FQDN to apply to the docker container
  #
  fqdn: helm-chart-repo.dev.xetus.com

  #
  # Optional, but recommended: the externally-accessed chart base url that 
  # should be supplied to Chartmuseum as the chart-url parameter.
  #
  # public_url: http://helm-chart-repo-1a.dev.xetus.com
  
  #
  # Optional: Whether the Chartmuseum server should log at the debug level. 
  # Defaults to False.
  #
  # debug: False

  #
  # Optional: Whether charts deployed to the server using the `packages_updated`
  # state should be repackaged, regardless of whether any changes have been 
  # detected with the chart definition.
  # Defaults to False.
  #
  # force_repackage: False
    
  #
  # The listing of git repositories that should be packaged into the
  # chart repository. 
  #
  # Each entry in the list can use one of the two sources for chart 
  # repositories:
  #
  #   1. `url`; the url for a git repository accessible via HTTP; or
  #   2. `path`; the path on the target minion's filesystem to the local git
  #   repository.

  # The `url` key supports a few additional options:
  # 
  #   * `branch`; the repository branch should be pulled from the git repo;
  #   * `rev`; the specific revision that should be pulled from the git repo;
  #   * `subpath`; the subpath within the git repository that contains the chart
  #   definition. This is useful in cases where the chart definition is bundled
  #   with an app's source repo, or in a chart bucket repository (like the 
  #   kubernetes stable repository).
  #   
  # For more information on both, please see the 
  # salt.states.git latest state to which those options are passed
  # 
  # (https://docs.saltstack.com/en/latest/ref/states/all/salt.states.git.html#salt.states.git.latest)
  #
  # git:
  #  repos:
  #    - path: /vagrant/k8s/charts/nfs-provisioner
  #    - url: https://github.com/group/some-chart.git
  #    - url: https://github.com/kubernetes/charts.git
  #      subpath: stable/redmine